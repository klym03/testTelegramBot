
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from create_bot import bot
from keyboards import client_kb as kb

router = Router()
goods_list = ['–¢–µ–ª–µ–≤—ñ–∑–æ—Ä', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ü—Ä–∏—Å—Ç–∞–≤–∫–∞']


class Order(StatesGroup):
    goods = State()
    quantity = State()
    address = State()


@router.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    await bot.send_message(
        message.chat.id,
        text='–í—ñ—Ç–∞—î–º–æ! üëãüèΩ'
             '\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏'
             '\n–¢–∏—Å–Ω—ñ—Ç—å –Ω–∞ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ üëáüèΩ',
        reply_markup=kb.ikb_client_main_menu(goods_list).as_markup()
    )


@router.callback_query(lambda callback: callback.data and callback.data.startswith("good_"))
async def handle_good_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    good_name = callback.data.split("_", 1)[1]
    await state.update_data(good_name=good_name)
    await state.set_state(Order.quantity)
    await bot.send_message(callback.message.chat.id,
                           text=f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {good_name}"
                                f"\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:")

@router.message(Order.quantity)
async def handle_quantity(message: types.Message, state: FSMContext):
    quantity = message.text
    await state.update_data(quantity=quantity)

    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É address
    await state.set_state(Order.address)
    await bot.send_message(message.chat.id,
                           text=f"–í–∏ –≤–≤–µ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É: {quantity}"
                                f"\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")


@router.message(Order.address)
async def handle_address(message: types.Message, state: FSMContext):
    address = message.text
    data = await state.get_data()
    good_name = data.get("good_name")
    quantity = data.get("quantity")

    await bot.send_message(message.chat.id,
                           text=f"–í–∏ –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏: {address}"
                                f"\n\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
                                f"\n–¢–æ–≤–∞—Ä: {good_name}"
                                f"\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}"
                                f"\n–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {address}",
                           reply_markup=kb.back_to_main_menu().as_markup())

@router.callback_query(lambda callback: callback.data == 'back_to_main_menu')
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await command_start_handler(callback.message)
